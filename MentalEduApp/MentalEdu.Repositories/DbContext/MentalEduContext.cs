// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace MentalEdu.Repositories.Models;

public partial class MentalEduContext : DbContext
{
    public MentalEduContext()
    {
    }

    public MentalEduContext(DbContextOptions<MentalEduContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Appointment> Appointments { get; set; }

    public virtual DbSet<Blog> Blogs { get; set; }

    public virtual DbSet<BlogComment> BlogComments { get; set; }

    public virtual DbSet<CounselingSession> CounselingSessions { get; set; }

    public virtual DbSet<ProgramCategory> ProgramCategories { get; set; }

    public virtual DbSet<Psychologist> Psychologists { get; set; }

    public virtual DbSet<PsychologistSpecialization> PsychologistSpecializations { get; set; }

    public virtual DbSet<Report> Reports { get; set; }

    public virtual DbSet<SessionFeedback> SessionFeedbacks { get; set; }

    public virtual DbSet<Specialization> Specializations { get; set; }

    public virtual DbSet<SupportProgram> SupportPrograms { get; set; }

    public virtual DbSet<Survey> Surveys { get; set; }

    public virtual DbSet<SurveyAnswer> SurveyAnswers { get; set; }

    public virtual DbSet<SurveyQuestion> SurveyQuestions { get; set; }

    public virtual DbSet<UserAccount> UserAccounts { get; set; }

    public virtual DbSet<UserProgram> UserPrograms { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=DESKTOP-KKQH9KS;Initial Catalog=MentalEdu_ASM;Persist Security Info=True;User ID=sa;Password=12345;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Appointment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Appointm__3214EC07B7117ACC");

            entity.ToTable("Appointment");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ActiveFlag).HasDefaultValue(true);
            entity.Property(e => e.AppointmentDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Psychologist).WithMany(p => p.AppointmentPsychologists)
                .HasForeignKey(d => d.PsychologistId)
                .HasConstraintName("FK__Appointme__Psych__59063A47");

            entity.HasOne(d => d.Student).WithMany(p => p.AppointmentStudents)
                .HasForeignKey(d => d.StudentId)
                .HasConstraintName("FK__Appointme__Stude__5812160E");
        });

        modelBuilder.Entity<Blog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Blog__3214EC0727FF30A4");

            entity.ToTable("Blog");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ActiveFlag).HasDefaultValue(true);
            entity.Property(e => e.Category)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Content).IsRequired();
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Author).WithMany(p => p.Blogs)
                .HasForeignKey(d => d.AuthorId)
                .HasConstraintName("FK__Blog__AuthorId__619B8048");
        });

        modelBuilder.Entity<BlogComment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BlogComm__3214EC07DEDF8ACA");

            entity.ToTable("BlogComment");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ActiveFlag).HasDefaultValue(true);
            entity.Property(e => e.CommentText).IsRequired();
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Blog).WithMany(p => p.BlogComments)
                .HasForeignKey(d => d.BlogId)
                .HasConstraintName("FK__BlogComme__BlogI__693CA210");

            entity.HasOne(d => d.User).WithMany(p => p.BlogComments)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__BlogComme__UserI__6A30C649");
        });

        modelBuilder.Entity<CounselingSession>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Counseli__3214EC076434071A");

            entity.ToTable("CounselingSession");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ActiveFlag).HasDefaultValue(true);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.SessionDate).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("Scheduled");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Psychologist).WithMany(p => p.CounselingSessions)
                .HasForeignKey(d => d.PsychologistId)
                .HasConstraintName("FK__Counselin__Psych__151B244E");

            entity.HasOne(d => d.User).WithMany(p => p.CounselingSessions)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Counselin__UserI__160F4887");
        });

        modelBuilder.Entity<ProgramCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ProgramC__3214EC07ADCB6FBE");

            entity.ToTable("ProgramCategory");

            entity.HasIndex(e => e.Name, "UQ__ProgramC__737584F6B7B4CDF4").IsUnique();

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ActiveFlag).HasDefaultValue(true);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<Psychologist>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Psycholo__3214EC07DE22B5DD");

            entity.ToTable("Psychologist");

            entity.HasIndex(e => e.ContactPhone, "UQ__Psycholo__5AE1ED84C0AC7E97").IsUnique();

            entity.HasIndex(e => e.LicenseNumber, "UQ__Psycholo__E88901666DFE12A6").IsUnique();

            entity.HasIndex(e => e.ContactEmail, "UQ__Psycholo__FFA796CDE0E6B1EB").IsUnique();

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ActiveFlag).HasDefaultValue(true);
            entity.Property(e => e.ClinicAddress).HasMaxLength(500);
            entity.Property(e => e.ConsultationFee).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.ContactEmail)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.ContactPhone)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.LicenseNumber)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Qualification)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.RatingsAverage).HasDefaultValue(0.0);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.User).WithMany(p => p.Psychologists)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Psycholog__UserI__7B5B524B");
        });

        modelBuilder.Entity<PsychologistSpecialization>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Psycholo__3214EC07F410CFFC");

            entity.ToTable("PsychologistSpecialization");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ActiveFlag).HasDefaultValue(true);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Psychologist).WithMany(p => p.PsychologistSpecializations)
                .HasForeignKey(d => d.PsychologistId)
                .HasConstraintName("FK__Psycholog__Psych__0D7A0286");

            entity.HasOne(d => d.Specialization).WithMany(p => p.PsychologistSpecializations)
                .HasForeignKey(d => d.SpecializationId)
                .HasConstraintName("FK__Psycholog__Speci__0E6E26BF");
        });

        modelBuilder.Entity<Report>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Report__3214EC0722079F39");

            entity.ToTable("Report");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ActiveFlag).HasDefaultValue(true);
            entity.Property(e => e.Content).IsRequired();
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ReportDate).HasColumnType("datetime");
            entity.Property(e => e.ReportType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.User).WithMany(p => p.Reports)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Report__UserId__70DDC3D8");
        });

        modelBuilder.Entity<SessionFeedback>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SessionF__3214EC07D0DCDDA1");

            entity.ToTable("SessionFeedback");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ActiveFlag).HasDefaultValue(true);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Session).WithMany(p => p.SessionFeedbacks)
                .HasForeignKey(d => d.SessionId)
                .HasConstraintName("FK__SessionFe__Sessi__208CD6FA");

            entity.HasOne(d => d.Student).WithMany(p => p.SessionFeedbacks)
                .HasForeignKey(d => d.StudentId)
                .HasConstraintName("FK__SessionFe__Stude__2180FB33");
        });

        modelBuilder.Entity<Specialization>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Speciali__3214EC0730D5B196");

            entity.ToTable("Specialization");

            entity.HasIndex(e => e.Name, "UQ__Speciali__737584F60F1F6B99").IsUnique();

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ActiveFlag).HasDefaultValue(true);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<SupportProgram>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SupportP__3214EC0745DCC913");

            entity.ToTable("SupportProgram");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ActiveFlag).HasDefaultValue(true);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.ProgramName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Category).WithMany(p => p.SupportPrograms)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SupportPr__Categ__45F365D3");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SupportPrograms)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__SupportPr__Creat__46E78A0C");
        });

        modelBuilder.Entity<Survey>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Survey__3214EC07F23FACC9");

            entity.ToTable("Survey");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ActiveFlag).HasDefaultValue(true);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.SurveyType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Surveys)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__Survey__CreatedB__286302EC");
        });

        modelBuilder.Entity<SurveyAnswer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SurveyAn__3214EC07EB264FA0");

            entity.ToTable("SurveyAnswer");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ActiveFlag).HasDefaultValue(true);
            entity.Property(e => e.AnswerText).IsRequired();
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Question).WithMany(p => p.SurveyAnswers)
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("FK__SurveyAns__Quest__38996AB5");

            entity.HasOne(d => d.Survey).WithMany(p => p.SurveyAnswers)
                .HasForeignKey(d => d.SurveyId)
                .HasConstraintName("FK__SurveyAns__Surve__36B12243");

            entity.HasOne(d => d.User).WithMany(p => p.SurveyAnswers)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__SurveyAns__UserI__37A5467C");
        });

        modelBuilder.Entity<SurveyQuestion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SurveyQu__3214EC0708923873");

            entity.ToTable("SurveyQuestion");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ActiveFlag).HasDefaultValue(true);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.QuestionText).IsRequired();
            entity.Property(e => e.QuestionType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Survey).WithMany(p => p.SurveyQuestions)
                .HasForeignKey(d => d.SurveyId)
                .HasConstraintName("FK__SurveyQue__Surve__2F10007B");
        });

        modelBuilder.Entity<UserAccount>(entity =>
        {
            entity.HasKey(e => e.UserAccountId).HasName("PK__UserAcco__DA6C70BA4F67FCDF");

            entity.ToTable("UserAccount");

            entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            entity.Property(e => e.ApplicationCode).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.EmployeeCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RequestCode).HasMaxLength(50);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<UserProgram>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__UserProg__3214EC07C1007CD1");

            entity.ToTable("UserProgram");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ActiveFlag).HasDefaultValue(true);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Progress).HasDefaultValue(0);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Program).WithMany(p => p.UserPrograms)
                .HasForeignKey(d => d.ProgramId)
                .HasConstraintName("FK__UserProgr__Progr__4E88ABD4");

            entity.HasOne(d => d.User).WithMany(p => p.UserPrograms)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__UserProgr__UserI__4D94879B");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}